{"version":3,"sources":["index.tsx"],"names":["Colors","Board","styles","resetButton","fontSize","padding","marginTop","color","backgroundColor","borderWidth","borderRadius","borderColor","fontFamily","marginLeft","width","marginRight","status","marginBottom","justifyContent","boardRow","display","board","vDivider","height","hDivider","useState","squares","Array","fill","xIsNext","values","setAllValues","renderSquare","square","Square","value","onClick","didGameEnd","newSquares","slice","handleClick","calculateWinner","lines","i","length","a","b","c","className","style","winner","getStatusString","paddingBottom","paddingTop","margin","border","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.409ff4d8.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nconst Colors = {\n    black: '#000000',\n    white: '#FFFFFF',\n    green: '#00FF00',\n    red: '#FF0000',\n    blue: '#0000FF',\n    light_green: '#52C7A2',\n    light_red: '#FF9999',\n    light_blue: '#9999FF',\n    gray: '#AAAAAA'\n} \n\ntype IBoard = {\n    squares: string[],\n    xIsNext: boolean\n}\n\nconst Board: React.FC = () => {\n    const styles = {\n        resetButton: {\n            fontSize: 25,\n            padding: 15,\n            marginTop: 30,\n            color: Colors.white,\n            backgroundColor: Colors.light_green,\n            borderWidth: 1,\n            borderRadius: 5,\n            borderColor: Colors.white,\n            fontFamily: 'Roboto',\n            marginLeft: '33%',\n            width: '33%',\n            marginRight: '33%',\n        },\n        status: {\n            fontSize: 25,\n            fontFamily: 'Roboto',\n            padding: 30,\n            marginBottom: 25, \n            justifyContent: 'center',\n            color: Colors.white,\n            backgroundColor: Colors.gray\n        },\n        boardRow: {\n            display: 'flex'\n        },\n        board: {\n            display: 'block',\n            width: '90%',\n            marginLeft: '5%',\n            marginRight: '5%',\n            backgroundColor: Colors.gray,\n        },\n        vDivider: {\n            backgroundColor: Colors.gray,\n            width: 6,\n            height: '100%',\n        },\n        hDivider: {\n            backgroundColor: Colors.gray,\n            width: '100%',\n            height: 4,\n        }\n    }\n\n    const [ values, setAllValues ] = useState<IBoard>({\n        squares: Array(9).fill(\"-\"),\n        xIsNext: true \n    }) \n\n    function handleClick(square: number) {\n        if(didGameEnd()) return\n        const newSquares = values.squares.slice()\n        if(newSquares[square] !== \"-\") return\n        newSquares[square] = values.xIsNext ? 'X' : 'O'\n        setAllValues({...values, squares: newSquares, xIsNext: !values.xIsNext})\n    }\n\n    function renderSquare(square: number) {\n        return (<Square value={values.squares[square]} onClick= {() => handleClick(square) }/>)\n    }\n\n    function calculateWinner(squares: string[]) : string | null {\n        const lines = [\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ]\n\n        for(let i = 0; i < lines.length; i++) {\n            const [a, b, c] = lines[i]\n            if(squares[a] !== \"-\" && squares[a]===squares[b] && squares[a]===squares[c]){\n                return squares[a]\n            }\n        }\n\n        return null\n    }\n\n    function didGameEnd(): boolean {\n        if(calculateWinner(values.squares)) return true\n        for(let i = 0; i < values.squares.length; i++)\n            if(values.squares[i] === \"-\") return false \n        return true\n    }\n    \n    function getStatusString() : string {\n        const winner = calculateWinner(values.squares)\n        let status: string\n        if(winner) status = 'Winner: ' + winner\n        else {\n            if(didGameEnd()) status = 'End of the game!'\n            else status = 'Next player: ' + (values.xIsNext ? 'X' : 'O')\n        }\n\n        return status\n    }\n\n    function reset() {\n        setAllValues({...values, squares: Array(9).fill(\"-\"), xIsNext: true})\n    }\n\n    return (\n        <div>\n            <div className=\"status\" style={styles.status}>{getStatusString()}</div>\n            <div className=\"board\" style={styles.board}>\n                <div className=\"board-row\" style={styles.boardRow}>\n                    {renderSquare(0)}\n                    <div style={styles.vDivider}/>\n                    {renderSquare(1)}\n                    <div style={styles.vDivider}/>\n                    {renderSquare(2)}\n                </div>\n                {<div style={styles.hDivider}/>}\n                <div className=\"board-row\" style={styles.boardRow}>\n                    {renderSquare(3)}\n                    <div style={styles.vDivider}/>\n                    {renderSquare(4)}\n                    <div style={styles.vDivider}/>\n                    {renderSquare(5)}\n                </div>\n                {<div style={styles.hDivider}/>}\n                <div className=\"board-row\" style={styles.boardRow}>\n                    {renderSquare(6)}\n                    <div style={styles.vDivider}/>\n                    {renderSquare(7)}\n                    <div style={styles.vDivider}/>\n                    {renderSquare(8)}\n                </div>\n            </div>\n            <button style={styles.resetButton} onClick={()=> reset()}>RESET</button>\n        </div>\n    )\n}\n\n\ntype SquareProps = {\n    value?: string\n    onClick: () => void \n}\n\nconst Square: React.FC<SquareProps> = ( { value, onClick }) => {\n    const styles = {\n        square: {\n            width: '50%',\n            paddingBottom: '10%',\n            paddingTop: '10%',\n            margin: 0,\n            fontSize: 50,\n            justifyContent: 'center',\n            color: Colors.light_green,\n            backgroundColor: Colors.white,\n            border: 0,\n        }\n    }\n\n    return (\n    <button\n      className=\"square\"\n      style={styles.square}\n      onClick={() => onClick()}\n    >{value}</button>\n    )\n}\n\nconst Game: React.FC = () => \n    <div className=\"game\" style={{height:'100%', width: '100%'}}>\n        <div className=\"game-board\" style={{height:'100%', width: '100%'}}>\n            <Board />\n        </div>\n        <div className=\"game-info\">\n            <div>{/*status*/}</div>\n            <ol>{/* TODO */}</ol>\n        </div>\n    </div>\n\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}